unit unFrmUtama;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters,
  cxContainer, cxEdit, dxSkinsCore, dxSkinsDefaultPainters, ExtCtrls, cxLabel,
  cxTextEdit, Menus, StdCtrls, cxButtons, ZDataset, ZAbstractConnection, ZConnection,
  IniFiles, cxMaskEdit, cxSpinEdit, DB, ZAbstractRODataset, cxDropDownEdit,
  cxLookupEdit, cxDBLookupEdit, cxDBLookupComboBox;

type
  TFrmUtama = class(TForm)
    cxtJenisDok: TcxTextEdit;
    cxlbl1: TcxLabel;
    cxlbl2: TcxLabel;
    cxtNoDok: TcxTextEdit;
    cxlbl3: TcxLabel;
    cxlbl4: TcxLabel;
    cxtCurrency: TcxTextEdit;
    cxlbl5: TcxLabel;
    pnl1: TPanel;
    pnl2: TPanel;
    pnl3: TPanel;
    cxlbl6: TcxLabel;
    cxlbl7: TcxLabel;
    cxBtnPilihFile: TcxButton;
    dlgOpenFile: TOpenDialog;
    lblNamaFileTmp: TLabel;
    cxBtnSimpan: TcxButton;
    cxBtnBatal: TcxButton;
    cxsNominal: TcxSpinEdit;
    cxLabel1: TcxLabel;
    lstFiles: TListBox;
    cxBtnHapusFile: TcxButton;
    cbxLuLokasi: TcxLookupComboBox;
    zqrLokasi: TZReadOnlyQuery;
    dsLokasi: TDataSource;
    cxtUploader: TcxTextEdit;
    procedure cxBtnPilihFileClick(Sender: TObject);
    procedure cxBtnSimpanClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure cxBtnBatalClick(Sender: TObject);
    procedure cxBtnHapusFileClick(Sender: TObject);
  private
    mID: string;
    FFileSAP: string;
  public
    { Public declarations }
  end;

var
  FrmUtama: TFrmUtama;

implementation

uses
  unTools, unDM;

{$R *.dfm}

procedure TFrmUtama.cxBtnBatalClick(Sender: TObject);
begin
  Application.Terminate;
end;

procedure TFrmUtama.cxBtnPilihFileClick(Sender: TObject);
var
  i: Integer;
begin
  lblNamaFileTmp.Caption := '';
  dlgOpenFile.Filter := 'PDF (*.pdf)|*.PDF';
  dlgOpenFile.Options := [ofFileMustExist];
  if dlgOpenFile.Execute then begin
    for i := 0 to dlgOpenFile.Files.Count - 1 do
      lstFiles.Items.Add(dlgOpenFile.Files[i]);
  end;
end;

procedure TFrmUtama.cxBtnSimpanClick(Sender: TObject);
var
  q, qapp, qm: TZQuery;
  qc, qdapp: TZReadOnlyQuery;
  id, IdPlant, i, seqPendukung: Integer;
  sNominal, s, ss, sPath, sNoDoc, sJenisDoc, sUploader, sCurr,
  destFile : string;
  NomSelainRP: real;
  lstEmail, lstBody, PostData: TStringList;
  copyResult: Boolean;
begin
  sPath := ExtractFilePath(Application.ExeName);

//  if VarIsNull(cbxLuLokasi.EditValue) or (cbxLuLokasi.Text = '') then
//  begin
//    Application.MessageBox('Silakan pilih lokasi terlebih dahulu!', 'Peringatan', MB_OK + MB_ICONWARNING);
//    Abort;
//  end;
//
//  if VarIsNull(cbxLuUploader.EditValue) or (cbxLuUploader.Text = '') then
//  begin
//    Application.MessageBox('Silakan pilih uploader yang sesuai terlebih dahulu!', 'Peringatan', MB_OK + MB_ICONWARNING);
//    Abort;
//  end;

  try
    q := OpenRS('SELECT * FROM bmi_doc_tes',[]);
    q.Insert;
    q.FieldByName('id_jenisdoc').AsInteger := 17;
    q.FieldByName('nodoc').AsString := cxtNoDok.Text;
    q.FieldByName('id_uploader').AsInteger := Aplikasi.IdUser;
    q.FieldByName('lokasi').AsString := cbxLuLokasi.Text;
    q.FieldByname('tgljam').AsDateTime := Now;
    q.FieldByName('currency').AsString := cxtCurrency.Text;
    q.FieldByName('nominal').AsFloat := cxsNominal.Value;
    q.FieldByName('id_plant').AsInteger := 0;
    q.FieldByName('f_bertingkat').AsInteger := 0;
    q.Post;
    q.Close;

    id := unTools.LastInsertID;
    mID := IntToStr(id);

    // file tmp
    destFile := '\\172.17.60.106\testing_file$\' + IntToStr(id) + '.pdf';
    copyResult := CopyFile(PChar(FFileSAP), PChar(destFile), False);
    if not copyResult then
    begin
      Application.MessageBox(
        PChar('Gagal menyalin file utama ke ' + destFile + #13#10 +
              'Periksa koneksi ke folder tujuan.'),
        'Error', MB_OK + MB_ICONERROR);
      Abort;
    end;

    for i := 0 to lstFiles.Items.Count - 1 do
    begin
      seqPendukung :=  i + 1;
      CopyFile(PChar(lstFiles.Items[i]),
        PChar('\\172.17.60.106\testing_file$\' + IntToStr(id) + '_' + IntToStr(seqPendukung) + '_pendukung.pdf'), False);
    end;

    DeleteFile(FFileSAP);

    if Trim(cxtCurrency.Text) = 'RP' then
      sCurr := 'IDR'
    else
      sCurr := '0';

    DecimalSeparator := '.';

    qc := OpenRS_RO('SELECT * FROM bmi_appnominal WHERE %s BETWEEN _min AND _max AND curr = ''%s''',
      [FloatToStr(cxsNominal.EditValue), sCurr]);

    if not qc.IsEmpty then
    begin
      qdapp := OpenRS_RO('SELECT a.* FROM bmi_appnominal_det a ' +
        'LEFT JOIN bmi_user b ON b.id = a.id_approver ' +
        'WHERE a.id_ref = %d AND a.id_uploader = %s ORDER BY a.id',
        [qc.FieldByName('id').AsInteger, varToStr(Aplikasi.IdUser)]);

      while not qdapp.Eof do
      begin
        qapp := OpenRS('SELECT * FROM bmi_doc_app_tes WHERE id_doc = %d',[id]);
        qapp.Insert;
        qapp.FieldByName('id_doc').AsInteger := id;
        qapp.FieldByName('id_userapp').AsInteger := qdapp.FieldByName('id_approver').AsInteger;
        qapp.Post;
        qdapp.Next;
      end;

      qdapp.Close;
      qdapp.Free;
    end
    else
    begin
      Screen.Cursor := crDefault;
      Application.MessageBox('User approver belum di setting. Mohon hubungi EDP.', 'Peringatan', MB_OK + MB_ICONWARNING);
      qc.Close; qc.Free;
      Abort;
    end;

    qc.Close; qc.Free;

  finally
    q.Close;
    q.Free;

    Application.MessageBox('Data berhasil disimpan!', 'Sukses', MB_OK + MB_ICONINFORMATION);
    Application.Terminate

  end;
end;

procedure TFrmUtama.cxBtnHapusFileClick(Sender: TObject);
var
  msg: string;
begin
  if lstFiles.ItemIndex = -1 then
  begin
    Application.MessageBox('Pilih file yang ingin dihapus terlebih dahulu!',
      'Peringatan', MB_OK + MB_ICONWARNING);
    Exit;
  end;

  msg := 'Hapus file "' + PChar(lstFiles.Items[lstFiles.ItemIndex]) + '" dari daftar?';

  if Application.MessageBox(PChar(msg),
      'Konfirmasi Hapus', MB_YESNO + MB_ICONQUESTION) = IDYES then
  begin
    lstFiles.Items.Delete(lstFiles.ItemIndex);
  end;
end;

procedure TFrmUtama.FormCreate(Sender: TObject);
var
  q, qUploader: TZQuery;
  sr: TSearchRec;
  sPath, sNoDoc, section: string;
  bFound: Boolean;
begin
  zqrLokasi.Close;
  zqrLokasi.Open;

  sPath := PChar(
              GetEnvironmentVariable('USERPROFILE') +
              '\AppData\Local\SAP\SAP GUI\tmp\'
            );

  if not DirectoryExists(sPath) then
  begin
    Application.MessageBox(PChar('Folder tidak ditemukan: ' + sPath), 'Peringatan', MB_OK + MB_ICONEXCLAMATION);
    Application.Terminate;
    Exit;
  end;

  bFound := False;

  if FindFirst(sPath + '*.*', faAnyFile, sr) = 0 then
  begin
    try
      while True do
      begin
        if (sr.Attr and faDirectory) = 0 then
        begin
          sNoDoc := ChangeFileExt(sr.Name, '');

          q := OpenRS('SELECT * FROM bmi_doc_log_sap WHERE no_doc = ''%s'' and is_opened = 0', [sNoDoc]);
          try
            if not q.IsEmpty then
            begin
              qUploader := OpenRS('SELECT * FROM bmi_doc_log_sap WHERE no_doc = ''%s'' and is_opened = 0', [sNoDoc])
              FFileSAP := sPath + sr.Name;
              cxtNoDok.Text := q.FieldByName('no_doc').AsString;
              cxtUploader.Text :=
              dm.zConn.ExecuteDirect('UPDATE bmi_doc_log_sap set is_opened = 1 where no_doc = ''' + q.FieldByName('no_doc').AsString + '''');
              bFound := True;
              Break;
            end;
          finally
            q.Free;
          end;
        end;

        if FindNext(sr) <> 0 then
          Break;
      end;
    finally
      FindClose(sr);
    end;
  end
  else
  begin
    Application.MessageBox(PChar('Tidak ada file di folder: ' + sPath), 'Peringatan', MB_OK + MB_ICONEXCLAMATION);
    Application.Terminate;
    Exit;
  end;

  if not bFound then
  begin
    Application.MessageBox('Tidak ada file yang cocok dengan data di database.', 'Peringatan', MB_OK + MB_ICONERROR);
    Application.Terminate;
  end;
end;

end.
